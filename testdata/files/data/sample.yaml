---
topics:
  - name: SKATA.VROMIA.POLY
    partitions: 6
    replication_factor: 1
    configs:
      cleanup.policy: delete
      min.insync.replicas: 1
      retention.ms: 10000000
    key:
      schema: "data/schemas/schema-key.json"
      compatibility: BACKWARD
    value:
      schema: "data/schemas/schema.json"
      compatibility: NONE
  - name: SKATA.VROMIA.LIGO
    partitions: 6
    replication_factor: 3
    configs:
      cleanup.policy: delete
      min.insync.replicas: 1
    key:
      schema: "data/schemas/schema-key.json"
      schema_type: "AVRO"
  - name: SKATA1
    partitions: 12
    replication_factor: 1
    configs:
      cleanup.policy: delete
  - name: SKATA2
    partitions: 1
    replication_factor: 1
  - name: SKATA3
    partitions: 1
    replication_factor: 1
  - name: SKATA4
    partitions: 1
    replication_factor: 1
  - name: SKATA5
    partitions: 1
    replication_factor: 1
  - name: SKATA6
    partitions: 1
    replication_factor: 1
  - name: SKATA7
    partitions: 1
    replication_factor: 1

clients:
  - principal: User:poutanaola
    consumer_for:
      - topic: TOPIC1.
      - topic: TOPIC2.
        isLiteral: true
      - topic: TOPICLOL
    producer_for:
      - topic: TOPIC1.
    resourceowner_for:
      - topic: TOPIC4.
  - principal: Group:malakes
    consumer_for:
      - topic: TOPIC1.
      - topic: TOPIC2.
    producer_for:
      - topic: TOPIC1.
        isLiteral: true
  - principal: User:produser
    producer_for:
      - topic: TOPIC1.
        # Strict mode is mean for production.
        # It will make the producer able to write the topics but read-only
        # access to the schema registry
        strict: true
    groups:
      - name: consumer-produser-
      - name: consumer-produser-owner-
        # if not specified, roles is [DeveloperRead]
        roles: ["ResourceOwner"]
        isLiteral: true
    rolebindings:
      # context can be one of:
      # KAFKA | SR | KSQLDB | CONNECT 
      - context: KAFKA 
        # Scope can be one of CLUSTER | RESOURCE
        scope: RESOURCE
        # Role , for CLUSTER or RESOURCE scopes can be one of
        # DeveloperRead | DeveloperWrite | ResourceOwner | DeveloperManage
        # Or, for CLUSTER scope onle, one of:
        # SystemAdmin | ClusterAdmin | UserAdmin | SecurityAdmin | AuditAdmin | Operator
        role: DeveloperRead
        # Resource is only needed when scope=RESOURCE. It should be empty otherwise
        # So examples for resource type are:
        # Topic | Subject | Group | Connector | TransactionalId
        resources:
          - name: trololo
            resource_type: Topic
            # Pattern type can be one of:
            # LITERAL | PREFIXED
            pattern_type: LITERAL
          - name: Skata
            resource_type: Topic
            pattern_type: PREFIXED
      - context: SR
        scope: CLUSTER
        role: SecurityAdmin 
        # Pattern type 
        pattern_type: LITERAL
